var inputPath = "::IMAGE_INPUT_PATH::";
var outputPath = "::IMAGE_OUTPUT_PATH::";

// Load up an image file
var image = loadImage(inputPath);
if(image.isNull()) {
    messageBox("Failed to load image from: " + inputPath);
    return;
}

// Reduce the size to something that can be geometrized fairly quickly
// This also keeps final file sizes manageable (should avoid hitting Twitter upload limits)
var maxSize = 256;
if(image.width() >= maxSize) {
    image := image.scaledToWidth(maxSize, QtSmoothTransformation);
}
if(image.height() >= maxSize) {
    image := image.scaledToHeight(maxSize, QtSmoothTransformation);
}

// Make sure the image is in RGBA8888 format
image := convertImageToRgba8888(image);

// Create a RGBA8888 bitmap from the image, that Geometrize can turn to shapes
var bitmap = createBitmap(image);

// Create an image task that aims to reproduce the bitmap as shapes
// This implicitly uses the average color of the bitmap as the starting background
// Note we use a synchronous task for simplicity/convenience
var task = SynchronousImageTask(bitmap);

// Add the initial background rectangle shape (we will export the shape data later)
task.drawBackgroundRectangle();

// Set some additional custom preferences
var prefs = task.getPreferences();
prefs.setCandidateShapeCount(1000);
prefs.setMaxShapeMutations(1000);
prefs.setMaxThreads(3);
task.setPreferences(prefs);

// Step the image task
::IMAGE_TASK_STEP_LOOPS::

// Exports the current shape data via SVG
var current = task.getCurrent();
var baseWidth = current.getWidth();
var baseHeight = current.getHeight();
var scaleFactor = 4;
if(!exportRasterizedSvg(task.getShapes(), baseWidth, baseHeight, baseWidth * scaleFactor, baseHeight * scaleFactor, outputPath)) {
    messageBox("Failed to write image to: " + outputPath);
}